---
- include_role:
    name: packages 
  vars: 
    packages_list:
      - nfs-ganesha-rados-grace

- name: create ganesha instance watcher
  copy:
    dest: /etc/ganesha/watch_instance.sh
    content: |
      #!/bin/bash
      STATE_FILE=/var/run/ganesha-${1}.state
      FC_FILE=/var/run/ganesha-${1}.fc
      INTERVAL=5
      FAULT_INTERVAL=10
      RAMP=10
      MAX_FAILS=2

      if [[ "$2" == "init" ]]
      then
              #ps ax | grep "$0 $1" | grep -v grep | grep -v $BASHPID | awk '{print $1}' | xargs kill
              ps ax | grep "$0 $1" | egrep -v 'init|grep' | awk '{print $1}' | xargs kill
              echo "init" > $STATE_FILE
              echo 0 > $FC_FILE
              exit $?
      fi

      function increment_failcount() {
        failcount=`cat $FC_FILE`
        failcount=$((${failcount}+1))
        echo $failcount > $FC_FILE
      }

      function check_failed (){
        failcount=`cat $FC_FILE`
        if [[ $failcount -gt $MAX_FAILS ]]
        then
          echo "failed" > $STATE_FILE
          echo "nfs-ganesha service has exceeded maximum allowed failures ($MAX_FAILS)"
          exit 1
        fi
      }

      if [[ "$2" == "fault" ]]
      then 
              ganesha-rados-grace --userid {{ ganesha_cluster_userid }} --cephconf {{ ganesha_cluster_cephconf }} -n {{ ganesha_cluster_namespace }} --pool {{ ganesha_cluster_pool }} start $1
              increment_failcount
              sleep $FAULT_INTERVAL
              ps ax | grep "$0 $1" | egrep -v 'fault|grep' | awk '{print $1}' | xargs kill
              check_failed 
              echo "init" > $STATE_FILE
              exit $?
      fi

      check_failed
      # nfs-ganesha systemd unit can take up to 20s to fail after starting up
      if [[ "$2" == "monitor" ]]
      then
        if [[ `ps -ef | grep "$0 $1 monitor" | egrep -v "grep|$$" | wc -l` -gt 0 ]]
        then
          echo "$1 monitor already running."
          exit 0
        fi
        while true
        do
          check_failed 
          if ! systemctl status nfs-ganesha@${1} > /dev/null
          then
            echo "down" > $STATE_FILE
          else
            echo "up" > $STATE_FILE
          fi
          sleep $INTERVAL
        done
      fi
    owner: root
    group: root
    mode: 0700

- name: setup keepalived 
  include_role:
    name: keepalived
  vars:
    keepalived_config_freeform: true
    keepalived_systemd_overrides: |
      [Service]
      ExecStartPre=/bin/bash -c "ps ax | grep '/etc/ganesha/watch_instance.sh' |  grep -v grep | awk '{print $1}'| xargs -I {} kill {}"
      ExecStartPre=/bin/bash -c 'for instance in `cat /etc/ganesha/instance_list`;do /etc/ganesha/watch_instance.sh $instance init;done'
      ExecStopPost=/bin/bash -c 'for instance in `cat /etc/ganesha/instance_list`;do /etc/ganesha/stop_instance.sh $instance > /dev/null;done'
      ExecStopPost=/bin/bash -c "ps ax | grep '/etc/ganesha/watch_instance.sh' |  grep -v grep | awk '{print $1}'| xargs -I {} kill {}"
    keepalived_config: |
      global_defs {
          script_user root
          enable_script_security
          {{ ganesha_cluster_keepalived_global_defs }}
      }
      
      {%  for ipaddr in ganesha_cluster_frontend_ips %}
      {%    set instance_name = 'ga'+loop.index|string %} 
      vrrp_script chk_{{ instance_name }} {
        script "/etc/ganesha/check_instance.sh {{ instance_name }}"
        interval 5
        #weight 1
        #weight -151
        #weight -200
        fall 2
        rise 2
        init_fail
      }
      vrrp_instance {{ instance_name }} {
          state MASTER
          interface {{ ganesha_cluster_keepalived_interface }}
          virtual_router_id {{ 50+loop.index }}
      {%    set myindex = lookup('ansible.utils.index_of', groups.nfs_cluster, 'eq', inventory_hostname) %}
      {%    if myindex == loop.index0 %} 
          priority 250
      {%    elif myindex > ganesha_cluster_frontend_ips|length %} 
      {%      set rolling_prio = (myindex % ganesha_cluster_frontend_ips|length) + loop.index0 %}
          priority {{ 150 + rolling_prio }}
      {%    elif ganesha_cluster_frontend_ips|length > groups.nfs_cluster|length %} 
      {%      set rolling_prio = groups.nfs_cluster|length % loop.index %}
          priority {{ 100 + rolling_prio  }}
      {%    else %}
          priority {{ 100 }}
      {%    endif %}
          advert_int 1
          unicast_src_ip {{ ganesha_cluster_keepalived_unicast_src_ip|default(ansible_default_ipv4.address) }}
          unicast_peer {
      {%    set my_ip = ganesha_cluster_keepalived_unicast_src_ip|default(hostvars[inventory_hostname].ansible_default_ipv4.address) %}
      {%    if ganesha_cluster_keepalived_unicast_peer is defined %}
            {{ ganesha_cluster_keepalived_unicast_peer | difference(my_ip) | join('\n') }}
      {%-    else -%}
      {%-      for host in groups.nfs_cluster -%}
      {%        set nextip = hostvars[host].ansible_default_ipv4.address %}
      {%-        if nextip != my_ip %} 
            {{ nextip }}
      {%-        endif %}
      {%-     endfor -%}
      {%    endif %}

          }
          authentication {
              auth_type PASS
              auth_pass IWbd3nZ
          }
      
          track_script {
              chk_{{ instance_name }}
          }
      
          virtual_ipaddress_excluded {
              {{ ipaddr }}
          }
          notify_master "/etc/ganesha/start_instance.sh {{ instance_name }}"
          notify_fault "/etc/ganesha/watch_instance.sh {{ instance_name }} fault"
          notify_backup "/etc/ganesha/stop_instance.sh {{ instance_name }}"
          notify_stop "/etc/ganesha/watch_instance.sh {{ instance_name }} init"
      }
      {%  endfor %}

- name: configure rados kv backend
  shell: 
    executable: /bin/bash
    cmd: |
      {%  for ipaddr in ganesha_cluster_frontend_ips %}
      {%    set instance_name = 'ga'+loop.index|string %} 
      if ganesha-rados-grace --userid {{ ganesha_cluster_userid }} --cephconf {{ ganesha_cluster_cephconf }} -n {{ ganesha_cluster_namespace }} --pool {{ ganesha_cluster_pool }} dump | grep {{ instance_name }}
      then
        ret=0
      else
        ganesha-rados-grace --userid {{ ganesha_cluster_userid }} --cephconf {{ ganesha_cluster_cephconf }} -n {{ ganesha_cluster_namespace }} --pool {{ ganesha_cluster_pool }} add {{ instance_name }}
        if [[ $? == 0 ]]; then ret=1; else ret=100;fi
      fi
      {%  endfor %}
      exit $ret
  register: kv_backend
  failed_when: 
    - kv_backend.rc != 0
    - kv_backend.rc != 1

- name: fix ganesha dbus security for multiple instances
  copy: 
    dest: /etc/dbus-1/system.d/nfs-ganesha-dbus.conf
    backup: true
    content: |
      <?xml version="1.0" encoding="UTF-8"?> <!-- -*- XML -*- -->
      <!DOCTYPE busconfig PUBLIC
       "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
       "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
      <busconfig>
        <!-- Only root can own the service -->
        <policy user="root">
        {%  for ip in ganesha_cluster_frontend_ips %}
        {%    set instance_name = 'ga'+loop.index|string %}
          <allow own="{{ instance_name }}.org.ganesha.nfsd"/>
          <allow send_destination="{{ instance_name }}.org.ganesha.nfsd"/>
      
          <allow send_destination="{{ instance_name }}.org.ganesha.nfsd"
                 send_interface="{{ instance_name }}.org.freedesktop.DBus.Introspectable"/>
      
          <allow send_destination="{{ instance_name }}.org.ganesha.nfsd"
                 send_interface="{{ instance_name }}.org.ganesha.nfsd.CBSIM"/>
      
          <allow send_destination="{{ instance_name }}.org.ganesha.nfsd"
                 send_interface="{{ instance_name }}.org.ganesha.nfsd.admin"/>
        {% endfor %}
        </policy>
      </busconfig>
  register: dbus_sec
  notify: restart dbus

- name: create instance list
  copy:
    dest: /etc/ganesha/instance_list
    content: |
      {% for ip in ganesha_cluster_frontend_ips %}
      {{ 'ga'+loop.index|string }}
      {% endfor %}

- name: create ganesha stop script
  copy:
    dest: /etc/ganesha/stop_instance.sh
    content: |
      #!/bin/bash
      ganesha-rados-grace --userid {{ ganesha_cluster_userid }} --cephconf {{ ganesha_cluster_cephconf }} -n {{ ganesha_cluster_namespace }} --pool {{ ganesha_cluster_pool }} start $1
      if systemctl status nfs-ganesha@$1
      then
        systemctl stop nfs-ganesha@$1
        /etc/ganesha/watch_instance.sh $1 init &
      fi
    owner: root
    group: root
    mode: 0700

- name: create ganesha start script
  copy:
    dest: /etc/ganesha/start_instance.sh
    content: |
      #!/bin/bash
      ganesha-rados-grace --userid {{ ganesha_cluster_userid }} --cephconf {{ ganesha_cluster_cephconf }} -n {{ ganesha_cluster_namespace }} --pool {{ ganesha_cluster_pool }} start $1
      while true
      do
        if ganesha-rados-grace -n {{ ganesha_cluster_namespace }} | grep $1 | grep E
        then
          break
        fi
        sleep 1
      done
      if ! systemctl status nfs-ganesha@$1
      then
        hostname {{ ganesha_clustername }}-active
        if [[ "`hostname`" == "{{ ganesha_clustername }}-active" ]]
        then
          if [[ `ps ax | grep "/etc/ganesha/watch_instance.sh $1 monitor" | egrep -v 'grep' | wc -l` -eq 0 ]] && [[ "`cat /var/run/ganesha-${1}.state`" != "failed" ]]
          then
            systemctl start nfs-ganesha@$1 
            /etc/ganesha/watch_instance.sh $1 monitor &
          else
            echo "Instance $1 has failed, resolve first and then restart keepalived."
            exit 1
          fi
        else
          echo "Error setting hostname to {{ ganesha_clustername }}-active !"
          exit 1
        fi
      fi
    owner: root
    group: root
    mode: 0700

- name: create ganesha check script
  copy:
    dest: /etc/ganesha/check_instance.sh
    content: |
      #!/bin/bash
      MODE=$1
      STATE=`cat /var/run/ganesha-${1}.state`
      if [[ "$STATE" == "init" ]] || [[ "$STATE" == "up" ]]
      then
              exit 0
      else
              exit 1
      fi
    owner: root
    group: root
    mode: 0700


# ganesha configs for each instance 
- name: 'set up ganesha for {{ instance_ip }}'
  include_tasks: ganesha.yaml
  vars:
    ganesha_instance_name: "ga{{ ansible_loop.index }}"
    ganesha_cluster: false
    ganesha_core_params:
      Enable_NLM: 'false'
      Protocols: '4'
      Bind_addr: "{{ instance_ip }}"
      Dbus_Name_Prefix: "{{ ganesha_instance_name }}"
    ganesha_custom_configuration: |
      NFSV4 {
        RecoveryBackend = rados_cluster;
        Grace_Period = {{ ganesha_cluster_grace_period }};
        Minor_Versions = 1,2;
        Lease_Lifetime = {{ ganesha_cluster_lease_lifetime }};
      } 
      RADOS_KV {
      	userid = {{ ganesha_cluster_userid }};
      	ceph_conf = {{ ganesha_cluster_cephconf }};
      	nodeid = {{ ganesha_instance_name }};
      	namespace = {{ ganesha_cluster_namespace }};
        pool = {{ ganesha_cluster_pool }};
      }
  loop: "{{ ganesha_cluster_frontend_ips }}"
  loop_control:
    extended: true
    loop_var: instance_ip
